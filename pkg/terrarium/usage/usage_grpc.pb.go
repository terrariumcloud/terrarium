// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: pb/terrarium/usage/usage.proto

package usage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DependencyTracker_RegisterDeploymentUnit_FullMethodName = "/terrarium.usage.DependencyTracker/RegisterDeploymentUnit"
	DependencyTracker_NotifyUsage_FullMethodName            = "/terrarium.usage.DependencyTracker/NotifyUsage"
)

// DependencyTrackerClient is the client API for DependencyTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DependencyTrackerClient interface {
	RegisterDeploymentUnit(ctx context.Context, in *RegisterDeploymentUnitRequest, opts ...grpc.CallOption) (*RegisterDeploymentUnitResponse, error)
	NotifyUsage(ctx context.Context, in *NotifyDependencyRequest, opts ...grpc.CallOption) (*NotifyDependencyResponse, error)
}

type dependencyTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewDependencyTrackerClient(cc grpc.ClientConnInterface) DependencyTrackerClient {
	return &dependencyTrackerClient{cc}
}

func (c *dependencyTrackerClient) RegisterDeploymentUnit(ctx context.Context, in *RegisterDeploymentUnitRequest, opts ...grpc.CallOption) (*RegisterDeploymentUnitResponse, error) {
	out := new(RegisterDeploymentUnitResponse)
	err := c.cc.Invoke(ctx, DependencyTracker_RegisterDeploymentUnit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyTrackerClient) NotifyUsage(ctx context.Context, in *NotifyDependencyRequest, opts ...grpc.CallOption) (*NotifyDependencyResponse, error) {
	out := new(NotifyDependencyResponse)
	err := c.cc.Invoke(ctx, DependencyTracker_NotifyUsage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DependencyTrackerServer is the server API for DependencyTracker service.
// All implementations must embed UnimplementedDependencyTrackerServer
// for forward compatibility
type DependencyTrackerServer interface {
	RegisterDeploymentUnit(context.Context, *RegisterDeploymentUnitRequest) (*RegisterDeploymentUnitResponse, error)
	NotifyUsage(context.Context, *NotifyDependencyRequest) (*NotifyDependencyResponse, error)
	mustEmbedUnimplementedDependencyTrackerServer()
}

// UnimplementedDependencyTrackerServer must be embedded to have forward compatible implementations.
type UnimplementedDependencyTrackerServer struct {
}

func (UnimplementedDependencyTrackerServer) RegisterDeploymentUnit(context.Context, *RegisterDeploymentUnitRequest) (*RegisterDeploymentUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDeploymentUnit not implemented")
}
func (UnimplementedDependencyTrackerServer) NotifyUsage(context.Context, *NotifyDependencyRequest) (*NotifyDependencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyUsage not implemented")
}
func (UnimplementedDependencyTrackerServer) mustEmbedUnimplementedDependencyTrackerServer() {}

// UnsafeDependencyTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DependencyTrackerServer will
// result in compilation errors.
type UnsafeDependencyTrackerServer interface {
	mustEmbedUnimplementedDependencyTrackerServer()
}

func RegisterDependencyTrackerServer(s grpc.ServiceRegistrar, srv DependencyTrackerServer) {
	s.RegisterService(&DependencyTracker_ServiceDesc, srv)
}

func _DependencyTracker_RegisterDeploymentUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeploymentUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyTrackerServer).RegisterDeploymentUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DependencyTracker_RegisterDeploymentUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyTrackerServer).RegisterDeploymentUnit(ctx, req.(*RegisterDeploymentUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyTracker_NotifyUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyDependencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyTrackerServer).NotifyUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DependencyTracker_NotifyUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyTrackerServer).NotifyUsage(ctx, req.(*NotifyDependencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DependencyTracker_ServiceDesc is the grpc.ServiceDesc for DependencyTracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DependencyTracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terrarium.usage.DependencyTracker",
	HandlerType: (*DependencyTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDeploymentUnit",
			Handler:    _DependencyTracker_RegisterDeploymentUnit_Handler,
		},
		{
			MethodName: "NotifyUsage",
			Handler:    _DependencyTracker_NotifyUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/terrarium/usage/usage.proto",
}
