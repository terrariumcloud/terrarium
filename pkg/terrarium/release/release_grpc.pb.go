// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: pb/terrarium/release/release.proto

package release

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReleasePublisher_Publish_FullMethodName = "/terrarium.release.ReleasePublisher/Publish"
)

// ReleasePublisherClient is the client API for ReleasePublisher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReleasePublisherClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
}

type releasePublisherClient struct {
	cc grpc.ClientConnInterface
}

func NewReleasePublisherClient(cc grpc.ClientConnInterface) ReleasePublisherClient {
	return &releasePublisherClient{cc}
}

func (c *releasePublisherClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, ReleasePublisher_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReleasePublisherServer is the server API for ReleasePublisher service.
// All implementations must embed UnimplementedReleasePublisherServer
// for forward compatibility
type ReleasePublisherServer interface {
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	mustEmbedUnimplementedReleasePublisherServer()
}

// UnimplementedReleasePublisherServer must be embedded to have forward compatible implementations.
type UnimplementedReleasePublisherServer struct {
}

func (UnimplementedReleasePublisherServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedReleasePublisherServer) mustEmbedUnimplementedReleasePublisherServer() {}

// UnsafeReleasePublisherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReleasePublisherServer will
// result in compilation errors.
type UnsafeReleasePublisherServer interface {
	mustEmbedUnimplementedReleasePublisherServer()
}

func RegisterReleasePublisherServer(s grpc.ServiceRegistrar, srv ReleasePublisherServer) {
	s.RegisterService(&ReleasePublisher_ServiceDesc, srv)
}

func _ReleasePublisher_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleasePublisherServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReleasePublisher_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleasePublisherServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReleasePublisher_ServiceDesc is the grpc.ServiceDesc for ReleasePublisher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReleasePublisher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terrarium.release.ReleasePublisher",
	HandlerType: (*ReleasePublisherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _ReleasePublisher_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/terrarium/release/release.proto",
}
