// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pb/terrarium/provider/services/version_manager.proto

package services

import (
	context "context"
	provider "github.com/terrariumcloud/terrarium/pkg/terrarium/provider"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VersionManagerClient is the client API for VersionManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VersionManagerClient interface {
	Register(ctx context.Context, in *provider.RegisterProviderRequest, opts ...grpc.CallOption) (*provider.Response, error)
	ListProviderVersions(ctx context.Context, in *ProviderName, opts ...grpc.CallOption) (*ProviderVersionsResponse, error)
	GetVersionData(ctx context.Context, in *VersionDataRequest, opts ...grpc.CallOption) (*PlatformMetadataResponse, error)
	ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error)
	GetProvider(ctx context.Context, in *ProviderName, opts ...grpc.CallOption) (*GetProviderResponse, error)
	PublishVersion(ctx context.Context, in *TerminateVersionRequest, opts ...grpc.CallOption) (*provider.Response, error)
	AbortProviderVersion(ctx context.Context, in *TerminateVersionRequest, opts ...grpc.CallOption) (*provider.Response, error)
}

type versionManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewVersionManagerClient(cc grpc.ClientConnInterface) VersionManagerClient {
	return &versionManagerClient{cc}
}

func (c *versionManagerClient) Register(ctx context.Context, in *provider.RegisterProviderRequest, opts ...grpc.CallOption) (*provider.Response, error) {
	out := new(provider.Response)
	err := c.cc.Invoke(ctx, "/terrarium.provider.services.VersionManager/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionManagerClient) ListProviderVersions(ctx context.Context, in *ProviderName, opts ...grpc.CallOption) (*ProviderVersionsResponse, error) {
	out := new(ProviderVersionsResponse)
	err := c.cc.Invoke(ctx, "/terrarium.provider.services.VersionManager/ListProviderVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionManagerClient) GetVersionData(ctx context.Context, in *VersionDataRequest, opts ...grpc.CallOption) (*PlatformMetadataResponse, error) {
	out := new(PlatformMetadataResponse)
	err := c.cc.Invoke(ctx, "/terrarium.provider.services.VersionManager/GetVersionData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionManagerClient) ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error) {
	out := new(ListProvidersResponse)
	err := c.cc.Invoke(ctx, "/terrarium.provider.services.VersionManager/ListProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionManagerClient) GetProvider(ctx context.Context, in *ProviderName, opts ...grpc.CallOption) (*GetProviderResponse, error) {
	out := new(GetProviderResponse)
	err := c.cc.Invoke(ctx, "/terrarium.provider.services.VersionManager/GetProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionManagerClient) PublishVersion(ctx context.Context, in *TerminateVersionRequest, opts ...grpc.CallOption) (*provider.Response, error) {
	out := new(provider.Response)
	err := c.cc.Invoke(ctx, "/terrarium.provider.services.VersionManager/PublishVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionManagerClient) AbortProviderVersion(ctx context.Context, in *TerminateVersionRequest, opts ...grpc.CallOption) (*provider.Response, error) {
	out := new(provider.Response)
	err := c.cc.Invoke(ctx, "/terrarium.provider.services.VersionManager/AbortProviderVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VersionManagerServer is the server API for VersionManager service.
// All implementations must embed UnimplementedVersionManagerServer
// for forward compatibility
type VersionManagerServer interface {
	Register(context.Context, *provider.RegisterProviderRequest) (*provider.Response, error)
	ListProviderVersions(context.Context, *ProviderName) (*ProviderVersionsResponse, error)
	GetVersionData(context.Context, *VersionDataRequest) (*PlatformMetadataResponse, error)
	ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error)
	GetProvider(context.Context, *ProviderName) (*GetProviderResponse, error)
	PublishVersion(context.Context, *TerminateVersionRequest) (*provider.Response, error)
	AbortProviderVersion(context.Context, *TerminateVersionRequest) (*provider.Response, error)
	mustEmbedUnimplementedVersionManagerServer()
}

// UnimplementedVersionManagerServer must be embedded to have forward compatible implementations.
type UnimplementedVersionManagerServer struct {
}

func (UnimplementedVersionManagerServer) Register(context.Context, *provider.RegisterProviderRequest) (*provider.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedVersionManagerServer) ListProviderVersions(context.Context, *ProviderName) (*ProviderVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProviderVersions not implemented")
}
func (UnimplementedVersionManagerServer) GetVersionData(context.Context, *VersionDataRequest) (*PlatformMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionData not implemented")
}
func (UnimplementedVersionManagerServer) ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProviders not implemented")
}
func (UnimplementedVersionManagerServer) GetProvider(context.Context, *ProviderName) (*GetProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvider not implemented")
}
func (UnimplementedVersionManagerServer) PublishVersion(context.Context, *TerminateVersionRequest) (*provider.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishVersion not implemented")
}
func (UnimplementedVersionManagerServer) AbortProviderVersion(context.Context, *TerminateVersionRequest) (*provider.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortProviderVersion not implemented")
}
func (UnimplementedVersionManagerServer) mustEmbedUnimplementedVersionManagerServer() {}

// UnsafeVersionManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VersionManagerServer will
// result in compilation errors.
type UnsafeVersionManagerServer interface {
	mustEmbedUnimplementedVersionManagerServer()
}

func RegisterVersionManagerServer(s grpc.ServiceRegistrar, srv VersionManagerServer) {
	s.RegisterService(&VersionManager_ServiceDesc, srv)
}

func _VersionManager_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(provider.RegisterProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionManagerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terrarium.provider.services.VersionManager/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionManagerServer).Register(ctx, req.(*provider.RegisterProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionManager_ListProviderVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionManagerServer).ListProviderVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terrarium.provider.services.VersionManager/ListProviderVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionManagerServer).ListProviderVersions(ctx, req.(*ProviderName))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionManager_GetVersionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionManagerServer).GetVersionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terrarium.provider.services.VersionManager/GetVersionData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionManagerServer).GetVersionData(ctx, req.(*VersionDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionManager_ListProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionManagerServer).ListProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terrarium.provider.services.VersionManager/ListProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionManagerServer).ListProviders(ctx, req.(*ListProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionManager_GetProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionManagerServer).GetProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terrarium.provider.services.VersionManager/GetProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionManagerServer).GetProvider(ctx, req.(*ProviderName))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionManager_PublishVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionManagerServer).PublishVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terrarium.provider.services.VersionManager/PublishVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionManagerServer).PublishVersion(ctx, req.(*TerminateVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionManager_AbortProviderVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionManagerServer).AbortProviderVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terrarium.provider.services.VersionManager/AbortProviderVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionManagerServer).AbortProviderVersion(ctx, req.(*TerminateVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VersionManager_ServiceDesc is the grpc.ServiceDesc for VersionManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VersionManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terrarium.provider.services.VersionManager",
	HandlerType: (*VersionManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _VersionManager_Register_Handler,
		},
		{
			MethodName: "ListProviderVersions",
			Handler:    _VersionManager_ListProviderVersions_Handler,
		},
		{
			MethodName: "GetVersionData",
			Handler:    _VersionManager_GetVersionData_Handler,
		},
		{
			MethodName: "ListProviders",
			Handler:    _VersionManager_ListProviders_Handler,
		},
		{
			MethodName: "GetProvider",
			Handler:    _VersionManager_GetProvider_Handler,
		},
		{
			MethodName: "PublishVersion",
			Handler:    _VersionManager_PublishVersion_Handler,
		},
		{
			MethodName: "AbortProviderVersion",
			Handler:    _VersionManager_AbortProviderVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/terrarium/provider/services/version_manager.proto",
}
