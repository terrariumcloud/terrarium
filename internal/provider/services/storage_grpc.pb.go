// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pb/terrarium/provider/services/storage.proto

package services

import (
	context "context"
	provider "github.com/terrariumcloud/terrarium/pkg/terrarium/provider"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageClient interface {
	DownloadProviderSourceZip(ctx context.Context, in *provider.DownloadSourceZipRequest, opts ...grpc.CallOption) (Storage_DownloadProviderSourceZipClient, error)
	DownloadShasum(ctx context.Context, in *provider.DownloadShasumRequest, opts ...grpc.CallOption) (Storage_DownloadShasumClient, error)
	DownloadShasumSignature(ctx context.Context, in *provider.DownloadShasumRequest, opts ...grpc.CallOption) (Storage_DownloadShasumSignatureClient, error)
}

type storageClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageClient(cc grpc.ClientConnInterface) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) DownloadProviderSourceZip(ctx context.Context, in *provider.DownloadSourceZipRequest, opts ...grpc.CallOption) (Storage_DownloadProviderSourceZipClient, error) {
	stream, err := c.cc.NewStream(ctx, &Storage_ServiceDesc.Streams[0], "/terrarium.provider.services.Storage/DownloadProviderSourceZip", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageDownloadProviderSourceZipClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Storage_DownloadProviderSourceZipClient interface {
	Recv() (*provider.SourceZipResponse, error)
	grpc.ClientStream
}

type storageDownloadProviderSourceZipClient struct {
	grpc.ClientStream
}

func (x *storageDownloadProviderSourceZipClient) Recv() (*provider.SourceZipResponse, error) {
	m := new(provider.SourceZipResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) DownloadShasum(ctx context.Context, in *provider.DownloadShasumRequest, opts ...grpc.CallOption) (Storage_DownloadShasumClient, error) {
	stream, err := c.cc.NewStream(ctx, &Storage_ServiceDesc.Streams[1], "/terrarium.provider.services.Storage/DownloadShasum", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageDownloadShasumClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Storage_DownloadShasumClient interface {
	Recv() (*provider.DownloadShasumResponse, error)
	grpc.ClientStream
}

type storageDownloadShasumClient struct {
	grpc.ClientStream
}

func (x *storageDownloadShasumClient) Recv() (*provider.DownloadShasumResponse, error) {
	m := new(provider.DownloadShasumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) DownloadShasumSignature(ctx context.Context, in *provider.DownloadShasumRequest, opts ...grpc.CallOption) (Storage_DownloadShasumSignatureClient, error) {
	stream, err := c.cc.NewStream(ctx, &Storage_ServiceDesc.Streams[2], "/terrarium.provider.services.Storage/DownloadShasumSignature", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageDownloadShasumSignatureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Storage_DownloadShasumSignatureClient interface {
	Recv() (*provider.DownloadShasumResponse, error)
	grpc.ClientStream
}

type storageDownloadShasumSignatureClient struct {
	grpc.ClientStream
}

func (x *storageDownloadShasumSignatureClient) Recv() (*provider.DownloadShasumResponse, error) {
	m := new(provider.DownloadShasumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StorageServer is the server API for Storage service.
// All implementations must embed UnimplementedStorageServer
// for forward compatibility
type StorageServer interface {
	DownloadProviderSourceZip(*provider.DownloadSourceZipRequest, Storage_DownloadProviderSourceZipServer) error
	DownloadShasum(*provider.DownloadShasumRequest, Storage_DownloadShasumServer) error
	DownloadShasumSignature(*provider.DownloadShasumRequest, Storage_DownloadShasumSignatureServer) error
	mustEmbedUnimplementedStorageServer()
}

// UnimplementedStorageServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (UnimplementedStorageServer) DownloadProviderSourceZip(*provider.DownloadSourceZipRequest, Storage_DownloadProviderSourceZipServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadProviderSourceZip not implemented")
}
func (UnimplementedStorageServer) DownloadShasum(*provider.DownloadShasumRequest, Storage_DownloadShasumServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadShasum not implemented")
}
func (UnimplementedStorageServer) DownloadShasumSignature(*provider.DownloadShasumRequest, Storage_DownloadShasumSignatureServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadShasumSignature not implemented")
}
func (UnimplementedStorageServer) mustEmbedUnimplementedStorageServer() {}

// UnsafeStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServer will
// result in compilation errors.
type UnsafeStorageServer interface {
	mustEmbedUnimplementedStorageServer()
}

func RegisterStorageServer(s grpc.ServiceRegistrar, srv StorageServer) {
	s.RegisterService(&Storage_ServiceDesc, srv)
}

func _Storage_DownloadProviderSourceZip_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(provider.DownloadSourceZipRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServer).DownloadProviderSourceZip(m, &storageDownloadProviderSourceZipServer{stream})
}

type Storage_DownloadProviderSourceZipServer interface {
	Send(*provider.SourceZipResponse) error
	grpc.ServerStream
}

type storageDownloadProviderSourceZipServer struct {
	grpc.ServerStream
}

func (x *storageDownloadProviderSourceZipServer) Send(m *provider.SourceZipResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Storage_DownloadShasum_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(provider.DownloadShasumRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServer).DownloadShasum(m, &storageDownloadShasumServer{stream})
}

type Storage_DownloadShasumServer interface {
	Send(*provider.DownloadShasumResponse) error
	grpc.ServerStream
}

type storageDownloadShasumServer struct {
	grpc.ServerStream
}

func (x *storageDownloadShasumServer) Send(m *provider.DownloadShasumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Storage_DownloadShasumSignature_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(provider.DownloadShasumRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServer).DownloadShasumSignature(m, &storageDownloadShasumSignatureServer{stream})
}

type Storage_DownloadShasumSignatureServer interface {
	Send(*provider.DownloadShasumResponse) error
	grpc.ServerStream
}

type storageDownloadShasumSignatureServer struct {
	grpc.ServerStream
}

func (x *storageDownloadShasumSignatureServer) Send(m *provider.DownloadShasumResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Storage_ServiceDesc is the grpc.ServiceDesc for Storage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Storage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terrarium.provider.services.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadProviderSourceZip",
			Handler:       _Storage_DownloadProviderSourceZip_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadShasum",
			Handler:       _Storage_DownloadShasum_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadShasumSignature",
			Handler:       _Storage_DownloadShasumSignature_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/terrarium/provider/services/storage.proto",
}
