// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: pb/terrarium/release/services/release.proto

package services

import (
	context "context"
	release "github.com/terrariumcloud/terrarium/pkg/terrarium/release"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Publisher_Publish_FullMethodName = "/terrarium.release.services.Publisher/Publish"
)

// PublisherClient is the client API for Publisher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublisherClient interface {
	Publish(ctx context.Context, in *release.PublishRequest, opts ...grpc.CallOption) (*release.PublishResponse, error)
}

type publisherClient struct {
	cc grpc.ClientConnInterface
}

func NewPublisherClient(cc grpc.ClientConnInterface) PublisherClient {
	return &publisherClient{cc}
}

func (c *publisherClient) Publish(ctx context.Context, in *release.PublishRequest, opts ...grpc.CallOption) (*release.PublishResponse, error) {
	out := new(release.PublishResponse)
	err := c.cc.Invoke(ctx, Publisher_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublisherServer is the server API for Publisher service.
// All implementations must embed UnimplementedPublisherServer
// for forward compatibility
type PublisherServer interface {
	Publish(context.Context, *release.PublishRequest) (*release.PublishResponse, error)
	mustEmbedUnimplementedPublisherServer()
}

// UnimplementedPublisherServer must be embedded to have forward compatible implementations.
type UnimplementedPublisherServer struct {
}

func (UnimplementedPublisherServer) Publish(context.Context, *release.PublishRequest) (*release.PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedPublisherServer) mustEmbedUnimplementedPublisherServer() {}

// UnsafePublisherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublisherServer will
// result in compilation errors.
type UnsafePublisherServer interface {
	mustEmbedUnimplementedPublisherServer()
}

func RegisterPublisherServer(s grpc.ServiceRegistrar, srv PublisherServer) {
	s.RegisterService(&Publisher_ServiceDesc, srv)
}

func _Publisher_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(release.PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Publisher_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).Publish(ctx, req.(*release.PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Publisher_ServiceDesc is the grpc.ServiceDesc for Publisher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Publisher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terrarium.release.services.Publisher",
	HandlerType: (*PublisherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Publisher_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/terrarium/release/services/release.proto",
}

const (
	Browse_ListReleases_FullMethodName     = "/terrarium.release.services.Browse/ListReleases"
	Browse_ListReleaseTypes_FullMethodName = "/terrarium.release.services.Browse/ListReleaseTypes"
	Browse_ListOrganization_FullMethodName = "/terrarium.release.services.Browse/ListOrganization"
)

// BrowseClient is the client API for Browse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrowseClient interface {
	ListReleases(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*ListReleasesResponse, error)
	ListReleaseTypes(ctx context.Context, in *ListReleaseTypesRequest, opts ...grpc.CallOption) (*ListReleaseTypesResponse, error)
	ListOrganization(ctx context.Context, in *ListOrganizationRequest, opts ...grpc.CallOption) (*ListOrganizationResponse, error)
}

type browseClient struct {
	cc grpc.ClientConnInterface
}

func NewBrowseClient(cc grpc.ClientConnInterface) BrowseClient {
	return &browseClient{cc}
}

func (c *browseClient) ListReleases(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*ListReleasesResponse, error) {
	out := new(ListReleasesResponse)
	err := c.cc.Invoke(ctx, Browse_ListReleases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browseClient) ListReleaseTypes(ctx context.Context, in *ListReleaseTypesRequest, opts ...grpc.CallOption) (*ListReleaseTypesResponse, error) {
	out := new(ListReleaseTypesResponse)
	err := c.cc.Invoke(ctx, Browse_ListReleaseTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browseClient) ListOrganization(ctx context.Context, in *ListOrganizationRequest, opts ...grpc.CallOption) (*ListOrganizationResponse, error) {
	out := new(ListOrganizationResponse)
	err := c.cc.Invoke(ctx, Browse_ListOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrowseServer is the server API for Browse service.
// All implementations must embed UnimplementedBrowseServer
// for forward compatibility
type BrowseServer interface {
	ListReleases(context.Context, *ListReleasesRequest) (*ListReleasesResponse, error)
	ListReleaseTypes(context.Context, *ListReleaseTypesRequest) (*ListReleaseTypesResponse, error)
	ListOrganization(context.Context, *ListOrganizationRequest) (*ListOrganizationResponse, error)
	mustEmbedUnimplementedBrowseServer()
}

// UnimplementedBrowseServer must be embedded to have forward compatible implementations.
type UnimplementedBrowseServer struct {
}

func (UnimplementedBrowseServer) ListReleases(context.Context, *ListReleasesRequest) (*ListReleasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleases not implemented")
}
func (UnimplementedBrowseServer) ListReleaseTypes(context.Context, *ListReleaseTypesRequest) (*ListReleaseTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleaseTypes not implemented")
}
func (UnimplementedBrowseServer) ListOrganization(context.Context, *ListOrganizationRequest) (*ListOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganization not implemented")
}
func (UnimplementedBrowseServer) mustEmbedUnimplementedBrowseServer() {}

// UnsafeBrowseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrowseServer will
// result in compilation errors.
type UnsafeBrowseServer interface {
	mustEmbedUnimplementedBrowseServer()
}

func RegisterBrowseServer(s grpc.ServiceRegistrar, srv BrowseServer) {
	s.RegisterService(&Browse_ServiceDesc, srv)
}

func _Browse_ListReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowseServer).ListReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Browse_ListReleases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowseServer).ListReleases(ctx, req.(*ListReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Browse_ListReleaseTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleaseTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowseServer).ListReleaseTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Browse_ListReleaseTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowseServer).ListReleaseTypes(ctx, req.(*ListReleaseTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Browse_ListOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowseServer).ListOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Browse_ListOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowseServer).ListOrganization(ctx, req.(*ListOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Browse_ServiceDesc is the grpc.ServiceDesc for Browse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Browse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terrarium.release.services.Browse",
	HandlerType: (*BrowseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListReleases",
			Handler:    _Browse_ListReleases_Handler,
		},
		{
			MethodName: "ListReleaseTypes",
			Handler:    _Browse_ListReleaseTypes_Handler,
		},
		{
			MethodName: "ListOrganization",
			Handler:    _Browse_ListOrganization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/terrarium/release/services/release.proto",
}
