// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pb/terrarium/module/services/dependency_resolver.proto

package services

import (
	context "context"
	module "github.com/terrariumcloud/terrarium-grpc-gateway/pkg/terrarium/module"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DependencyResolverClient is the client API for DependencyResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DependencyResolverClient interface {
	RegisterModuleDependencies(ctx context.Context, in *module.RegisterModuleDependenciesRequest, opts ...grpc.CallOption) (*module.TransactionStatusResponse, error)
	RegisterContainerDependencies(ctx context.Context, in *module.RegisterContainerDependenciesRequest, opts ...grpc.CallOption) (*module.TransactionStatusResponse, error)
	RetrieveContainerDependencies(ctx context.Context, in *module.RetrieveContainerDependenciesRequest, opts ...grpc.CallOption) (DependencyResolver_RetrieveContainerDependenciesClient, error)
	RetrieveModuleDependencies(ctx context.Context, in *module.RetrieveModuleDependenciesRequest, opts ...grpc.CallOption) (DependencyResolver_RetrieveModuleDependenciesClient, error)
}

type dependencyResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewDependencyResolverClient(cc grpc.ClientConnInterface) DependencyResolverClient {
	return &dependencyResolverClient{cc}
}

func (c *dependencyResolverClient) RegisterModuleDependencies(ctx context.Context, in *module.RegisterModuleDependenciesRequest, opts ...grpc.CallOption) (*module.TransactionStatusResponse, error) {
	out := new(module.TransactionStatusResponse)
	err := c.cc.Invoke(ctx, "/terrarium.module.services.DependencyResolver/RegisterModuleDependencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyResolverClient) RegisterContainerDependencies(ctx context.Context, in *module.RegisterContainerDependenciesRequest, opts ...grpc.CallOption) (*module.TransactionStatusResponse, error) {
	out := new(module.TransactionStatusResponse)
	err := c.cc.Invoke(ctx, "/terrarium.module.services.DependencyResolver/RegisterContainerDependencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dependencyResolverClient) RetrieveContainerDependencies(ctx context.Context, in *module.RetrieveContainerDependenciesRequest, opts ...grpc.CallOption) (DependencyResolver_RetrieveContainerDependenciesClient, error) {
	stream, err := c.cc.NewStream(ctx, &DependencyResolver_ServiceDesc.Streams[0], "/terrarium.module.services.DependencyResolver/RetrieveContainerDependencies", opts...)
	if err != nil {
		return nil, err
	}
	x := &dependencyResolverRetrieveContainerDependenciesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DependencyResolver_RetrieveContainerDependenciesClient interface {
	Recv() (*module.ContainerDependenciesResponse, error)
	grpc.ClientStream
}

type dependencyResolverRetrieveContainerDependenciesClient struct {
	grpc.ClientStream
}

func (x *dependencyResolverRetrieveContainerDependenciesClient) Recv() (*module.ContainerDependenciesResponse, error) {
	m := new(module.ContainerDependenciesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dependencyResolverClient) RetrieveModuleDependencies(ctx context.Context, in *module.RetrieveModuleDependenciesRequest, opts ...grpc.CallOption) (DependencyResolver_RetrieveModuleDependenciesClient, error) {
	stream, err := c.cc.NewStream(ctx, &DependencyResolver_ServiceDesc.Streams[1], "/terrarium.module.services.DependencyResolver/RetrieveModuleDependencies", opts...)
	if err != nil {
		return nil, err
	}
	x := &dependencyResolverRetrieveModuleDependenciesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DependencyResolver_RetrieveModuleDependenciesClient interface {
	Recv() (*module.ModuleDependenciesResponse, error)
	grpc.ClientStream
}

type dependencyResolverRetrieveModuleDependenciesClient struct {
	grpc.ClientStream
}

func (x *dependencyResolverRetrieveModuleDependenciesClient) Recv() (*module.ModuleDependenciesResponse, error) {
	m := new(module.ModuleDependenciesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DependencyResolverServer is the server API for DependencyResolver service.
// All implementations must embed UnimplementedDependencyResolverServer
// for forward compatibility
type DependencyResolverServer interface {
	RegisterModuleDependencies(context.Context, *module.RegisterModuleDependenciesRequest) (*module.TransactionStatusResponse, error)
	RegisterContainerDependencies(context.Context, *module.RegisterContainerDependenciesRequest) (*module.TransactionStatusResponse, error)
	RetrieveContainerDependencies(*module.RetrieveContainerDependenciesRequest, DependencyResolver_RetrieveContainerDependenciesServer) error
	RetrieveModuleDependencies(*module.RetrieveModuleDependenciesRequest, DependencyResolver_RetrieveModuleDependenciesServer) error
	mustEmbedUnimplementedDependencyResolverServer()
}

// UnimplementedDependencyResolverServer must be embedded to have forward compatible implementations.
type UnimplementedDependencyResolverServer struct {
}

func (UnimplementedDependencyResolverServer) RegisterModuleDependencies(context.Context, *module.RegisterModuleDependenciesRequest) (*module.TransactionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterModuleDependencies not implemented")
}
func (UnimplementedDependencyResolverServer) RegisterContainerDependencies(context.Context, *module.RegisterContainerDependenciesRequest) (*module.TransactionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterContainerDependencies not implemented")
}
func (UnimplementedDependencyResolverServer) RetrieveContainerDependencies(*module.RetrieveContainerDependenciesRequest, DependencyResolver_RetrieveContainerDependenciesServer) error {
	return status.Errorf(codes.Unimplemented, "method RetrieveContainerDependencies not implemented")
}
func (UnimplementedDependencyResolverServer) RetrieveModuleDependencies(*module.RetrieveModuleDependenciesRequest, DependencyResolver_RetrieveModuleDependenciesServer) error {
	return status.Errorf(codes.Unimplemented, "method RetrieveModuleDependencies not implemented")
}
func (UnimplementedDependencyResolverServer) mustEmbedUnimplementedDependencyResolverServer() {}

// UnsafeDependencyResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DependencyResolverServer will
// result in compilation errors.
type UnsafeDependencyResolverServer interface {
	mustEmbedUnimplementedDependencyResolverServer()
}

func RegisterDependencyResolverServer(s grpc.ServiceRegistrar, srv DependencyResolverServer) {
	s.RegisterService(&DependencyResolver_ServiceDesc, srv)
}

func _DependencyResolver_RegisterModuleDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(module.RegisterModuleDependenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyResolverServer).RegisterModuleDependencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terrarium.module.services.DependencyResolver/RegisterModuleDependencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyResolverServer).RegisterModuleDependencies(ctx, req.(*module.RegisterModuleDependenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyResolver_RegisterContainerDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(module.RegisterContainerDependenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DependencyResolverServer).RegisterContainerDependencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terrarium.module.services.DependencyResolver/RegisterContainerDependencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DependencyResolverServer).RegisterContainerDependencies(ctx, req.(*module.RegisterContainerDependenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DependencyResolver_RetrieveContainerDependencies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(module.RetrieveContainerDependenciesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DependencyResolverServer).RetrieveContainerDependencies(m, &dependencyResolverRetrieveContainerDependenciesServer{stream})
}

type DependencyResolver_RetrieveContainerDependenciesServer interface {
	Send(*module.ContainerDependenciesResponse) error
	grpc.ServerStream
}

type dependencyResolverRetrieveContainerDependenciesServer struct {
	grpc.ServerStream
}

func (x *dependencyResolverRetrieveContainerDependenciesServer) Send(m *module.ContainerDependenciesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DependencyResolver_RetrieveModuleDependencies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(module.RetrieveModuleDependenciesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DependencyResolverServer).RetrieveModuleDependencies(m, &dependencyResolverRetrieveModuleDependenciesServer{stream})
}

type DependencyResolver_RetrieveModuleDependenciesServer interface {
	Send(*module.ModuleDependenciesResponse) error
	grpc.ServerStream
}

type dependencyResolverRetrieveModuleDependenciesServer struct {
	grpc.ServerStream
}

func (x *dependencyResolverRetrieveModuleDependenciesServer) Send(m *module.ModuleDependenciesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DependencyResolver_ServiceDesc is the grpc.ServiceDesc for DependencyResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DependencyResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terrarium.module.services.DependencyResolver",
	HandlerType: (*DependencyResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterModuleDependencies",
			Handler:    _DependencyResolver_RegisterModuleDependencies_Handler,
		},
		{
			MethodName: "RegisterContainerDependencies",
			Handler:    _DependencyResolver_RegisterContainerDependencies_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RetrieveContainerDependencies",
			Handler:       _DependencyResolver_RetrieveContainerDependencies_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RetrieveModuleDependencies",
			Handler:       _DependencyResolver_RetrieveModuleDependencies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/terrarium/module/services/dependency_resolver.proto",
}
