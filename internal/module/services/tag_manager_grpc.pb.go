// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pb/terrarium/module/services/tag_manager.proto

package services

import (
	context "context"
	module "github.com/terrariumcloud/terrarium/pkg/terrarium/module"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TagManagerClient is the client API for TagManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagManagerClient interface {
	PublishTag(ctx context.Context, in *PublishTagRequest, opts ...grpc.CallOption) (*module.Response, error)
}

type tagManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewTagManagerClient(cc grpc.ClientConnInterface) TagManagerClient {
	return &tagManagerClient{cc}
}

func (c *tagManagerClient) PublishTag(ctx context.Context, in *PublishTagRequest, opts ...grpc.CallOption) (*module.Response, error) {
	out := new(module.Response)
	err := c.cc.Invoke(ctx, "/terrarium.module.services.TagManager/PublishTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagManagerServer is the server API for TagManager service.
// All implementations must embed UnimplementedTagManagerServer
// for forward compatibility
type TagManagerServer interface {
	PublishTag(context.Context, *PublishTagRequest) (*module.Response, error)
	mustEmbedUnimplementedTagManagerServer()
}

// UnimplementedTagManagerServer must be embedded to have forward compatible implementations.
type UnimplementedTagManagerServer struct {
}

func (UnimplementedTagManagerServer) PublishTag(context.Context, *PublishTagRequest) (*module.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishTag not implemented")
}
func (UnimplementedTagManagerServer) mustEmbedUnimplementedTagManagerServer() {}

// UnsafeTagManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagManagerServer will
// result in compilation errors.
type UnsafeTagManagerServer interface {
	mustEmbedUnimplementedTagManagerServer()
}

func RegisterTagManagerServer(s grpc.ServiceRegistrar, srv TagManagerServer) {
	s.RegisterService(&TagManager_ServiceDesc, srv)
}

func _TagManager_PublishTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagManagerServer).PublishTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terrarium.module.services.TagManager/PublishTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagManagerServer).PublishTag(ctx, req.(*PublishTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TagManager_ServiceDesc is the grpc.ServiceDesc for TagManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terrarium.module.services.TagManager",
	HandlerType: (*TagManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishTag",
			Handler:    _TagManager_PublishTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/terrarium/module/services/tag_manager.proto",
}
